---
- import_playbook: includes/ensure_host_keys.yml

- name: environmental setup
  hosts: all
  tasks:
    - include_tasks: includes/defaults.yml

- name: base system install
  hosts: all
  vars:
    # Ansible will use this path on remote hosts to run the interpreter with.
    ansible_python_interpreter: /usr/bin/python3
  tasks:
    - name: ensure that the host OS is a supported system
      assert:
        that:
          - (ansible_distribution == "Ubuntu" and
             ansible_distribution_major_version | int >= 18 and
             ansible_distribution_major_version | int < 20)
            or
            (ansible_distribution == "Debian" and
             ansible_distribution_major_version | int >= 9 and
             ansible_distribution_major_version | int < 10)
        fail_msg: "the system ({{ ansible_distribution }} : {{ansible_distribution_major_version }}) is not supported"
        success_msg: "system is supported"

    - name: install system packages
      become: yes
      become_method: sudo
      block:
      #TODO BHL: this step is expected to be very sensitive to the OS
      #          package names differ between ubuntu versions and/or to debian
      - name: Install base software
        apt:
          state: present
          name:
            - build-essential
            - git
            - python3-dev
            - python3-venv
            - libssl-dev
            - libevent-dev
            - libzmq3-dev

      - name: Installing extra system level things for rabbit.
        when: messagebus == "rmq"
        apt:
          state: present
          name:
            - apt-transport-https
            - libwxbase3.0-0v5
            - libwxgtk3.0-0v5
            - libsctp1

      - name: Adding apt_key for erlang solutions
        when: messagebus == "rmq"
        apt_key:
          url: https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc
          state: present

      - name: Adding apt repo for erlang
        when: messagebus == "rmq"
        apt_repository:
          update_cache: yes
          repo: deb https://packages.erlang-solutions.com/ubuntu bionic contrib
          state: present
          filename: erlang.solutions.list

      - name: Install erlang requirements
        when: messagebus == "rmq"
        apt:
          update_cache: yes
          state: present
          name:
            - "erlang-base"
            - "erlang-diameter"
            - "erlang-eldap"
            - "erlang-ssl"
            - "erlang-crypto"
            - "erlang-asn1"
            - "erlang-public-key"
            - "erlang-nox"
    ## end of system package install block

    - name: Download volttron repository tarball
      get_url:
        url: https://github.com/{{ volttron_git_organization }}/{{ volttron_git_repo }}/archive/{{ volttron_git_branch }}.tar.gz
        dest: "/tmp/volttron-{{ inventory_hostname }}.tar.gz"
        force: yes

    - name: Stat volttron dir
      stat:
        path: "{{ volttron_root }}"
      register: volttron_path_stat

    - name: Stat tar file
      stat:
        path: "/tmp/volttron-{{ inventory_hostname }}.tar.gz"
        get_checksum: yes
      register: new_tar_stat

    - name: Stat old tar
      stat:
        path: "{{ ansible_env.HOME }}/volttron-{{ inventory_hostname }}.tar.gz"
        get_checksum: yes
      register: old_tar_stat

    - name: Should reset
      set_fact:
        redo_volttron: "{{ (not volttron_path_stat.stat.exists or not old_tar_stat.stat.exists or (new_tar_stat.stat.checksum != old_tar_stat.stat.checksum)) }}"

    - name: "[re]establish volttron source directory"
      when: redo_volttron
      block:
      - name: Move new file
        command: mv "/tmp/volttron-{{ inventory_hostname }}.tar.gz" "{{ ansible_env.HOME }}/volttron-{{ inventory_hostname }}.tar.gz"

      - name: Remove volttron dir if exists
        file:
          path: "{{ volttron_root }}"
          state: absent

      - name: make sure hostname folder exists
        file:
          path: "{{ ansible_env.HOME }}/{{ inventory_hostname }}"
          state: directory

      - name: Extract archive
        unarchive:
          src: "{{ ansible_env.HOME }}/volttron-{{ inventory_hostname }}.tar.gz"
          dest: "{{ ansible_env.HOME }}/{{ inventory_hostname }}/"
          remote_src: yes

      - name: rename folder
        command: mv "{{ ansible_env.HOME }}/{{ inventory_hostname }}/volttron-{{volttron_git_branch}}" "{{ volttron_root }}"
    ## end of block to update volttron source

    - name: Bootstrap the python3 environment
      command:
        cmd: "python3 bootstrap.py"
        chdir: "{{ volttron_root }}"
        creates: "{{ volttron_root }}/env"

    - name: Test if pika installed
      shell:
        cmd: "env/bin/pip list --disable-pip-version-check --format legacy| grep -F gevent-pika | wc -l"
        chdir: "{{ volttron_root }}"
      register: already_installed_pika
    - name: Boostrap rmq environment
      when: (messagebus == "rmq" and "0" not in already_installed_pika.stdout)
      command:
        cmd: "env/bin/python bootstrap.py --rabbitmq"
        chdir: "{{ volttron_root }}"

    - name: Test if ws4py is installed
      shell:
        cmd: "env/bin/pip list --disable-pip-version-check --format legacy| grep -F ws4py | wc -l"
        chdir: "{{ volttron_root }}"
      register: web_enabled
    - name: Enabling web packages for environment
      when: (enable_web == True and "0" not in web_enabled.stdout)
      command:
        cmd: "{{ volttron_root }}/env/bin/python bootstrap.py --web"
        chdir: "{{ volttron_root }}"

    - name: Enabling master driver packages for environment
      when: (enable_drivers == True)
      command:
        cmd: "{{ volttron_root }}/env/bin/python bootstrap.py --drivers"
        chdir: "{{ volttron_root }}"

    - debug:
        msg: "extra requirements {{ extra_requirements }} "

    - name: Install extra requirements for this instance
      pip:
        virtualenv: "{{ansible_env.HOME}}/volttron/env"
        name: extra_requirements
      environment:
        # This module doesn't use the http_proxy as the env instead it uses the
        # capitalized one
        # reference https://docs.ansible.com/ansible/latest/modules/pip_module.html
        HTTP_PROXY: "{{ http_proxy }}"
      when: (extra_requirements | bool)
    - pause:

    - set_fact:
        local_remote_config_file: "{{lookup('env','DEPLOYMENT_ROOT')}}/{{inventory_hostname}}/{{inventory_hostname}}.yml"
        local_configs_dir: "{{lookup('env','DEPLOYMENT_ROOT')}}/{{inventory_hostname}}/configs"
        python3: "{{lookup('env','DEPLOYMENT_ROOT')}}/env/bin/python"

    - include_tasks: includes/ansible_venv.yml
    - include_tasks: includes/copy_configs.yml

    - name: "Create custom fact directory"
      become: True
      become_method: sudo
      file:
        owner: "{{ ansible_user }}"
        recurse: yes
        path: "/etc/ansible/facts.d"
        state: "directory"

    - include_tasks: includes/update_facts.yml
